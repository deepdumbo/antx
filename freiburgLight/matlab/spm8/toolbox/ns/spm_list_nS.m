function varargout = spm_list_nS(varargin)
% This is a variant of spm_list specifically designed to produce
% cluster p-values (corrected and uncorrected) under non-uniform
% smoothness, or non-stationarity.
%
% FORMAT TabDat = spm_list_nS('List',VRPV,SPM,hReg,[Num,Dis,Str])
% Summary list of local maxima for entire volume of interest
% FORMAT TabDat = spm_list_nS('ListCluster',VRPV,SPM,hReg,[Num,Dis,Str])
% List of local maxima for a single suprathreshold cluster
% In both cases, VRPV refers to the file pointer for the RPV image.
%
%                           ----------------
%
% This function is called by spm_results_ui_nS to generate cluster 
% p-values under non-stationarity. The voxel-level p-values are identical
% to that of spm_list. See spm_list for additional details on
% variables used in this function.
%
%_______________________________________________________________________
%
% spm_list_nS creats a list of p-values according to the inference 
% parameters generated by the "Results" button on SPM. The necessary
% information regarding the SPM (along with thresholding info) is passed
% on by xSPM variable. spm_list_nS combines this information with 
% cluster size information (in resels) generated by spm_max_nS, and
% calls stat_thresh to calculate cluster p-values. The results are 
% displayed in a similar manner as the "volume" button on SPM. 
% Only the cluster p-values are different. In particular,
%
% Cluster-level - Nk   = number of resels in this cluster
%               - Nv   = number of voxels in this cluster
%               - Pc   = prob(R or more resels in cluster, FWE corrected)
%               - Pu   = prob(R or more resels in cluster, uncorrected)
%
% The size of a cluster is measured in resels, as a sum of RPV 
% (resel-per-voxel) values in all the voxels in that cluster.
% The RPV is calculated at each voxel during the "estimation" process,
% and written in the RPV image. RPV is a measure of roughness; as RPV
% increases, images become rough [2]. For each cluster, the RPV values
% are summed for all the voxels in that particular cluster, to yield
% the cluster size in resels. Note that this approach does not assume
% uniform smoothness. The actual cluster size calculation is carried out
% by spm_max_nS.
%
% The cluster p-values under non-stationarity are calculated by
% stat_thresh, a modified version of stat_threshold function written by
% Dr. Keith Worsley. The cluster p-values calculated by this function 
% properly models clusters in a t-field [1] while accounting for
% variability in RPV estimation [2]. The concept of cluster size
% correction under non-stationarity was pioneered by Dr. Worsley [3].
%
% A hidden feature of spm_list_nS allows calculation of cluster p-values
% for t- and F-images under stationarity as well. This is implemented by 
% the stat_thresh function using the results by Cao [1]. This feature is
% activated by creating a global variable called ASSUME_STATIONARY and
% set it to 1. Otherwise spm_list_nS calculates cluster p-values under
% non-stationarity.
%
% [1] Cao J, The Size of the Connected Components of Excursion Sets of
%     Chi^2, t, and F Fields. Advances in Applied Probability 31:579-595
%     (1999)
% [2] Hayasaka S, Phan KL, Liberzon I, Worsley KJ & Nichols TE, 
%     Nonstationary cluster-size inference with random field and
%     permutation methods. NeuroImage 22:676-687 (2004)
% [3] Worsley KJ, Andermann M, Koulis T, MacDonald D & Evans AC,
%     Detecting Changes in Nonisotropic Images. Human Brain Mapping
%     8:98-101 (1999)
%
%_______________________________________________________________________
% modified from spm_list.m version 2.43
% version 0.82 beta, May 10, 2007 by Satoru Hayasaka


% satellite figure global variable
%-----------------------------------------------------------------------
global SatWindow


% stationary or non-stationary cluster size p-values?
%-----------------------------------------------------------------------
global ASSUME_STATIONARY
if isempty(ASSUME_STATIONARY)
    ASSUME_STATIONARY = 0;
end

%=======================================================================
switch lower(varargin{1}), case 'list'                            %-List
%=======================================================================
% FORMAT TabDat = spm_list_nS('list',VRPV,SPM,hReg)

%-Tolerance for p-value underflow, when computing equivalent Z's
%-----------------------------------------------------------------------
tol = eps*10;

%-Parse arguments and set maxima number and separation
%-----------------------------------------------------------------------
if nargin < 3,	error('insufficient arguments'),     end
if nargin < 4,	hReg = []; else, hReg = varargin{4}; end


%-Get current location (to highlight selected voxel in table)
%-----------------------------------------------------------------------
xyzmm     = spm_results_ui('GetCoords');

%-RPV image pointer
%-----------------------------------------------------------------------
VRPV  = varargin{2};

%-Extract data from xSPM
%-----------------------------------------------------------------------
S     = varargin{3}.S;
R     = varargin{3}.R;
FWHM  = varargin{3}.FWHM;
VOX   = varargin{3}.VOX;
n     = varargin{3}.n;
STAT  = varargin{3}.STAT;
df    = varargin{3}.df;
u     = varargin{3}.u;
M     = varargin{3}.M;
v2r   = 1/prod(FWHM(~isinf(FWHM)));			%-voxels to resels
k     = varargin{3}.k*v2r;
QPs   = varargin{3}.Ps;					% Needed for FDR
QPs   = sort(QPs(:));

%-get number and separation for maxima to be reported
%-----------------------------------------------------------------------
if length(varargin) > 4

	Num    = varargin{5};		% number of maxima per cluster
	Dis    = varargin{6};		% distance among clusters (mm)
else
	Num    = 3;
	Dis    = 8;
end
if length(varargin) > 6

	Title  = varargin{6};
else
	Title  = 'p-values adjusted for search volume';
end


%-Setup graphics panel
%-----------------------------------------------------------------------
spm('Pointer','Watch')
if SatWindow
	Fgraph = SatWindow;
	figure(Fgraph);
else
	Fgraph = spm_figure('GetWin','Graphics');
end
spm_results_ui('Clear',Fgraph)
FS    = spm('FontSizes');			%-Scaled font sizes
PF    = spm_platform('fonts');			%-Font names (for this platform)


%-Table header & footer
%=======================================================================

%-Table axes & Title
%----------------------------------------------------------------------
if SatWindow, ht = 0.85; bot = .14; else, ht = 0.4; bot = .1; end;

if STAT == 'P'
	Title = 'Posterior Probabilities';
end
	
hAx   = axes('Position',[0.025 bot 0.9 ht],...
	'DefaultTextFontSize',FS(8),...
	'DefaultTextInterpreter','Tex',...
	'DefaultTextVerticalAlignment','Baseline',...
	'Units','points',...
	'Visible','off');

AxPos = get(hAx,'Position'); set(hAx,'YLim',[0,AxPos(4)])
dy    = FS(9);
y     = floor(AxPos(4)) - dy;

text(0,y,['Statistics:  \it\fontsize{',num2str(FS(9)),'}',Title],...
	'FontSize',FS(11),'FontWeight','Bold');	y = y - dy/2;
line([0 1],[y y],'LineWidth',3,'Color','r'),	y = y - 9*dy/8;


%-Construct table header
%-----------------------------------------------------------------------
set(gca,'DefaultTextFontName',PF.helvetica,'DefaultTextFontSize',FS(8))

Hc = [];
Hp = [];
%h  = text(0.01,y,	'set-level','FontSize',FS(9));		Hc = [Hc,h];
%h  = line([0,0.11],[1,1]*(y-dy/4),'LineWidth',0.5,'Color','r');	Hc = [Hc,h];
%h  = text(0.08,y-9*dy/8,	'\itc ');			Hc = [Hc,h];
%h  = text(0.02,y-9*dy/8,	'\itp ');			Hc = [Hc,h];
%								Hp = [Hp,h];

if ASSUME_STATIONARY
    sCSP = 'stationary';
else
    sCSP = 'non-stationary';
end 
text(0.10,y, ['cluster-level (',sCSP,')'],'FontSize',FS(9));
line([0,0.38],[1,1]*(y-dy/4),'LineWidth',0.5,'Color','r');
h  = text(0.03,y-9*dy/8,	'\itp \rm_{corrected}');	Hp = [Hp,h];
h  = text(0.30,y-9*dy/8,	'\itp \rm_{uncorrected}');	Hp = [Hp,h];
h  = text(0.12,y-9*dy/8,	'\itK \rm_{voxel}');	        
h  = text(0.21,y-9*dy/8,	'\itK \rm_{resel}');	      

text(0.60,y,		'voxel-level','FontSize',FS(9));
line([0.46,0.86],[1,1]*(y-dy/4),'LineWidth',0.5,'Color','r');
h  = text(0.46,y-9*dy/8,	'\itp \rm_{FWE-corr}');		Hp = [Hp,h];
h  = text(0.55,y-9*dy/8,        '\itp \rm_{FDR-corr}');		Hp = [Hp,h];
h  = text(0.79,y-9*dy/8,	'\itp \rm_{uncorrected}');	Hp = [Hp,h];
h  = text(0.64,y-9*dy/8,	 sprintf('\\it%c',STAT));
h  = text(0.72,y-9*dy/8,	'(\itZ\rm_\equiv)');

text(0.93,y - dy/2,['x,y,z \fontsize{',num2str(FS(8)),'}\{mm\}']);


%-Headers for text table...
%-----------------------------------------------------------------------
TabDat.tit = Title;
TabDat.hdr = {	'set',		'c';...
		'set',		'p';...
		'cluster',	'p(cor)';...
		'cluster',	'equivk';...
		'cluster',	'resels';...
		'cluster',	'p(unc)';...
		'voxel',	'p(FWE-cor)';...
		'voxel',	'p(FDR-cor)';...
		'voxel',	 STAT;...
		'voxel',	'equivZ';...
		'voxel',	'p(unc)';...
		'',		'x,y,z {mm}'}';...
		
TabDat.fmt = {	'%-0.3f','%g',...				%-Set
		'%0.3f', '%0.0f', '%5.3f', '%0.3f',...		%-Cluster
		'%0.3f', '%0.3f', '%6.2f', '%5.2f', '%0.3f',...	%-Voxel
		'%3.0f %3.0f %3.0f'};				%-XYZ

%-Column Locations
%-----------------------------------------------------------------------
tCol       = [  0.03      0.12      0.21      0.31 ...		%-Cluster
	        0.46      0.55      0.62      0.71      0.80 ...%-Voxel
                0.92];						%-XYZ

% move to next vertial postion marker
%-----------------------------------------------------------------------
y     = y - 7*dy/4;
line([0 1],[y y],'LineWidth',1,'Color','r')
y     = y - 5*dy/4;
y0    = y;


%-Table filtering note
%-----------------------------------------------------------------------
if isinf(Num)
	TabDat.str = sprintf('table shows all local maxima > %.1fmm apart',Dis);
else
	TabDat.str = sprintf(['table shows %d local maxima ',...
		'more than %.1fmm apart'],Num,Dis);
end
text(0.5,4,TabDat.str,'HorizontalAlignment','Center','FontName',PF.helvetica,...
    'FontSize',FS(8),'FontAngle','Italic')


%-Volume, resels and smoothness (if classical inference)
%-----------------------------------------------------------------------
line([0 1],[0 0],'LineWidth',1,'Color','r')
if STAT ~= 'P'
%-----------------------------------------------------------------------
FWHMmm          = FWHM.*VOX; 				% FWHM {mm}
Pz              = spm_P(1,0,u,df,STAT,1,n,S);
Pu              = spm_P(1,0,u,df,STAT,R,n,S);
Qu              = spm_P_FDR(u,df,STAT,n,QPs);
[P Pn Em En EN] = spm_P(1,k,u,df,STAT,R,n,S);


%-Footnote with SPM parameters
%-----------------------------------------------------------------------
set(gca,'DefaultTextFontName',PF.helvetica,...
	'DefaultTextInterpreter','None','DefaultTextFontSize',FS(8))
TabDat.ftr    = cell(5,2);
TabDat.ftr{1} = ...
	sprintf('Height threshold: %c = %0.2f, p = %0.3f (%0.3f)',...
		 STAT,u,Pz,Pu);
TabDat.ftr{2} = ...
	sprintf('Extent threshold: k = %0.0f voxels, p = %0.3f (%0.3f)',...
	         k/v2r,Pn,P);
TabDat.ftr{3} = ...
	sprintf('Expected resels per cluster, <k> = %0.3f',En);
TabDat.ftr{4} = ...
	sprintf('Expected number of clusters, <c> = %0.2f',Em*Pn);
TabDat.ftr{5} = ...
	sprintf('Expected false discovery rate, <= %0.2f',Qu);
TabDat.ftr{7} = ...
	sprintf('Degrees of freedom = [%0.1f, %0.1f]',df);
TabDat.ftr{8} = ...
	sprintf(['Smoothness FWHM = %0.1f %0.1f %0.1f {mm} ',...
		 ' = %0.1f %0.1f %0.1f {voxels}'],FWHMmm,FWHM);
TabDat.ftr{9} = ...
	sprintf('Search vol: %0.0f cmm; %0.0f voxels; %0.1f resels',S*prod(VOX),S,R(end));
TabDat.ftr{10} = ...
	sprintf(['Voxel size: [%0.1f, %0.1f, %0.1f] mm ',...
		' (1 resel = %0.2f voxels)'],VOX,prod(FWHM));

text(0.0,-1*dy,TabDat.ftr{1},...
	'UserData',[u,Pz,Pu,Qu],'ButtonDownFcn','get(gcbo,''UserData'')')
text(0.0,-2*dy,TabDat.ftr{2},...
	'UserData',[k,Pn,P],'ButtonDownFcn','get(gcbo,''UserData'')')
text(0.0,-3*dy,TabDat.ftr{3},...
	'UserData',En,'ButtonDownFcn','get(gcbo,''UserData'')')
text(0.0,-4*dy,TabDat.ftr{4},...
	'UserData',Em*Pn,'ButtonDownFcn','get(gcbo,''UserData'')')
text(0.0,-5*dy,TabDat.ftr{5},...
	'UserData',Qu,'ButtonDownFcn','get(gcbo,''UserData'')')
text(0.5,-1*dy,TabDat.ftr{7},...
	'UserData',df,'ButtonDownFcn','get(gcbo,''UserData'')')
text(0.5,-2*dy,TabDat.ftr{8},...
	'UserData',FWHMmm,'ButtonDownFcn','get(gcbo,''UserData'')')
text(0.5,-3*dy,TabDat.ftr{9},...
	'UserData',[S*prod(VOX),S,R(end)],...
	'ButtonDownFcn','get(gcbo,''UserData'')')
text(0.5,-4*dy,TabDat.ftr{10},...
	'UserData',[VOX,prod(FWHM)],...
	'ButtonDownFcn','get(gcbo,''UserData'')')

end % Classical


%-Characterize excursion set in terms of maxima
% (sorted on Z values and grouped by regions)
%=======================================================================
if ~length(varargin{3}.Z)
	text(0.5,y-6*dy,'no suprathreshold clusters',...
		'HorizontalAlignment','Center',...
		'FontAngle','Italic','FontWeight','Bold',...
		'FontSize',FS(16),'Color',[1,1,1]*.5);
	TabDat.dat = cell(0,11);
	varargout  = {TabDat};
	spm('Pointer','Arrow')
	return
end

% Includes Darren Gitelman's code for working around
% spm_max for conjunctions with negative thresholds
%-----------------------------------------------------------------------
minz           = abs(min(min(varargin{3}.Z)));
zscores        = 1 + minz + varargin{3}.Z;
[N Z XYZ A Rs] = spm_max_nS(zscores,varargin{3}.XYZ,VRPV);
Z              = Z - minz - 1;

%-Convert cluster sizes from voxels to resels
%-----------------------------------------------------------------------
V2R = v2r;
N   = N.*V2R;

%-If stationarity is assumed ...
%-----------------------------------------------------------------------
if ASSUME_STATIONARY
    Rs  = N;
end

%-Convert maxima locations from voxels to mm
%-----------------------------------------------------------------------
XYZmm = M(1:3,:)*[XYZ; ones(1,size(XYZ,2))];



%-Table proper (& note all data in cell array)
%=======================================================================


%-Set-level p values {c} - do not display if reporting a single cluster
% Displayed in the footer
%-----------------------------------------------------------------------
c     = max(A);					%-Number of clusters
if STAT ~= 'P'
	Pc    = spm_P(c,k,u,df,STAT,R,n,S);	%-Set-level p-value
else
	Pc    = [];
	set(Hp,'Visible','off')
end


TabDat.ftr{6} = sprintf('Set-level: c = %0.0f, p = %0.3f',c,Pc);
text(0.0,-6*dy,TabDat.ftr{6},...
       'UserData',[c,Pc],'ButtonDownFcn','get(gcbo,''UserData'')')


%if c > 1;
%	h     = text(tCol(1),y,sprintf(TabDat.fmt{1},Pc),'FontWeight','Bold',...
%		'UserData',Pc,'ButtonDownFcn','get(gcbo,''UserData'')');
%	hPage = [hPage, h];
%	h     = text(tCol(2),y,sprintf(TabDat.fmt{2},c),'FontWeight','Bold',...
%		'UserData',c,'ButtonDownFcn','get(gcbo,''UserData'')');
%	hPage = [hPage, h];
%else
%	set(Hc,'Visible','off')
%end

TabDat.dat = {Pc,c};				%-Table data
TabLin     = 1;					%-Table data line


%-Pagination variables
%-----------------------------------------------------------------------
hPage = [];
set(gca,'DefaultTextFontName',PF.courier,'DefaultTextFontSize',FS(7))



%-Local maxima p-values & statistics
%-----------------------------------------------------------------------
HlistXYZ = [];

%-Do the non-stationary cluster p-values beforehand
[tmpRs itmpRs jtmpRs]   = unique(Rs); %-shorten the list of cluster sizes
                                      % in resels

if (STAT ~= 'P') & (STAT == 'F')
    tmpdf  = df;                    %-df (F-stat)
    tmpdfw = [tmpdf(2) tmpdf(2)];   %-df for RPV field
elseif (STAT ~= 'P') & (STAT == 'T')
    tmpdf  = df(2); %-df (t-stat)
    tmpdfw = tmpdf; %-df for RPV field
end
    %-if stationary, then RPV image has infinite df
if ASSUME_STATIONARY
    tmpdfw  = Inf*tmpdfw;
end

[tmp1 tmpPk tmp2 tmpPn] = stat_thresh(R,S,1,[tmpdf;tmpdfw],0.05,u,tmpRs);
                          %-calculates cluster p-values via stat_thresh

PPk = tmpPk(jtmpRs);
PPn = tmpPn(jtmpRs);

%-Other p-values are found one-by-one in this loop
while prod(size(find(finite(Z))))

	% Paginate if necessary
	%---------------------------------------------------------------
	if y < min(Num + 1,3)*dy

		% added Fgraph term to paginate on Satellite window
		%-------------------------------------------------------
		h     = text(0.5,-5*dy,...
			sprintf('Page %d',spm_figure('#page',Fgraph)),...
			'FontName',PF.helvetica,'FontAngle','Italic',...
			'FontSize',FS(8));

		spm_figure('NewPage',[hPage,h])
		hPage = [];
		y     = y0;
	end

    	%-Find largest remaining local maximum
    	%---------------------------------------------------------------
	[U,i]   = max(Z);			% largest maxima
	j       = find(A == A(i));		% maxima in cluster


    	%-Compute cluster {k} and voxel-level {u} p values for this cluster
    	%---------------------------------------------------------------
	Nk      = N(i)/v2r;			% extent        {voxels}
        Nv      = Rs(i);                        % extent        {resels}

	if STAT ~= 'P'
	Pz      = spm_P(1,0,   U,df,STAT,1,n,S);% uncorrected p value
	Pu      = spm_P(1,0,   U,df,STAT,R,n,S);% FWE-corrected {based on Z)
	Qu      = spm_P_FDR(   U,df,STAT,n,QPs);% FDR-corrected {based on Z)
	Pk      = PPk(i);                       % [un]corrected {based on k)
	Pn      = PPn(i);                       % [un]corrected {based on k)

	if Pz < tol				% Equivalent Z-variate
	    Ze  = Inf;	 			% (underflow => can't compute)
	else
	    Ze  = spm_invNcdf(1 - Pz);
	end
	else
		Pz	= [];
		Pu      = [];
		Qu      = [];
		Pk	= [];
		Pn	= [];
		Ze      = spm_invNcdf(U);
	end


	%-Print cluster and maximum voxel-level p values {Z}
    	%---------------------------------------------------------------
	h     = text(tCol(1),y,sprintf(TabDat.fmt{3},Pk),'FontWeight','Bold',...
		'UserData',Pk,'ButtonDownFcn','get(gcbo,''UserData'')');
	hPage = [hPage, h];

	h     = text(tCol(2),y,sprintf(TabDat.fmt{4},Nk),'FontWeight','Bold',...
		'UserData',Nk,'ButtonDownFcn','get(gcbo,''UserData'')');
	hPage = [hPage, h];
	h     = text(tCol(3),y,sprintf(TabDat.fmt{5},Nv),'FontWeight','Bold',...
		'UserData',Nv,'ButtonDownFcn','get(gcbo,''UserData'')');
	hPage = [hPage, h];
	h     = text(tCol(4),y,sprintf(TabDat.fmt{6},Pn),'FontWeight','Bold',...
		'UserData',Pn,'ButtonDownFcn','get(gcbo,''UserData'')');
	hPage = [hPage, h];

	h     = text(tCol(5),y,sprintf(TabDat.fmt{7},Pu),'FontWeight','Bold',...
		'UserData',Pu,'ButtonDownFcn','get(gcbo,''UserData'')');
	hPage = [hPage, h];
	h     = text(tCol(6),y,sprintf(TabDat.fmt{8},Qu),'FontWeight','Bold',...
		'UserData',Qu,'ButtonDownFcn','get(gcbo,''UserData'')');
	hPage = [hPage, h];
	h     = text(tCol(7),y,sprintf(TabDat.fmt{9},U),'FontWeight','Bold',...
		'UserData',U,'ButtonDownFcn','get(gcbo,''UserData'')');
	hPage = [hPage, h];
	h     = text(tCol(8),y,sprintf(TabDat.fmt{10},Ze),'FontWeight','Bold',...
		'UserData',Ze,'ButtonDownFcn','get(gcbo,''UserData'')');
	hPage = [hPage, h];
	h     = ...
	text(tCol(9),y,sprintf(TabDat.fmt{11},Pz),'FontWeight','Bold',...
		'UserData',Pz,'ButtonDownFcn','get(gcbo,''UserData'')');
	hPage = [hPage, h];

	% Specifically changed so it properly finds hMIPax
	%---------------------------------------------------------------------
	h     = text(tCol(10),y,sprintf(TabDat.fmt{12},XYZmm(:,i)),...
		'FontWeight','Bold',...
		'Tag','ListXYZ',...
		'ButtonDownFcn',[...
		'hMIPax = findobj(''tag'',''hMIPax'');',...
		'spm_mip_ui(''SetCoords'',get(gcbo,''UserData''),hMIPax);'],...
		'Interruptible','off','BusyAction','Cancel',...
		'UserData',XYZmm(:,i));

	HlistXYZ = [HlistXYZ, h];
	if spm_XYZreg('Edist',xyzmm,XYZmm(:,i))<tol & ~isempty(hReg)
		set(h,'Color','r')
	end
	hPage  = [hPage, h];
 
	y      = y - dy;
	
	[TabDat.dat{TabLin,3:11}] = deal(Pk,Nv,Pn,Pu,Qu,U,Ze,Pz,XYZmm(:,i));
	TabLin = TabLin + 1;

	%-Print Num secondary maxima (> Dis mm apart)
    	%---------------------------------------------------------------
	[l q] = sort(-Z(j));				% sort on Z value
	D     = i;
	for i = 1:length(q)
	    d = j(q(i));
	    if min(sqrt(sum((XYZmm(:,D)-XYZmm(:,d)*ones(1,size(D,2))).^2)))>Dis;

		if length(D) < Num
			
			% Paginate if necessary
			%-----------------------------------------------
			if y < dy	
				h = text(0.5,-5*dy,sprintf('Page %d',...
					spm_figure('#page',Fgraph)),...
					'FontName',PF.helvetica,...
					'FontAngle','Italic',...
					'FontSize',FS(8));

				spm_figure('NewPage',[hPage,h])
				hPage = [];
				y     = y0;
			end

			% voxel-level p values {Z}
			%-----------------------------------------------
			if STAT ~= 'P'
				Pz    = spm_P(1,0,Z(d),df,STAT,1,n,S);
				Pu    = spm_P(1,0,Z(d),df,STAT,R,n,S);
				Qu    = spm_P_FDR(Z(d),df,STAT,n,QPs);
				if Pz < tol
					Ze = Inf;
				else,   Ze = spm_invNcdf(1 - Pz); end
			else
				Pz    = [];
				Pu    = [];
				Qu    = [];
				Ze    = spm_invNcdf(Z(d));
			end

			h     = text(tCol(5),y,sprintf(TabDat.fmt{7},Pu),...
				'UserData',Pu,...
				'ButtonDownFcn','get(gcbo,''UserData'')');
			hPage = [hPage, h];

			h     = text(tCol(6),y,sprintf(TabDat.fmt{8},Qu),...
				'UserData',Qu,...
				'ButtonDownFcn','get(gcbo,''UserData'')');
			hPage = [hPage, h];
			h     = text(tCol(7),y,sprintf(TabDat.fmt{9},Z(d)),...
				'UserData',Z(d),...
				'ButtonDownFcn','get(gcbo,''UserData'')');
			hPage = [hPage, h];
			h     = text(tCol(8),y,sprintf(TabDat.fmt{10},Ze),...
				'UserData',Ze,...
				'ButtonDownFcn','get(gcbo,''UserData'')');
			hPage = [hPage, h];
			h     = text(tCol(9),y,sprintf(TabDat.fmt{11},Pz),...
				'UserData',Pz,...
				'ButtonDownFcn','get(gcbo,''UserData'')');
			hPage = [hPage, h];

			% specifically modified line to use hMIPax
			%-----------------------------------------------
			h     = text(tCol(10),y,...
				sprintf(TabDat.fmt{12},XYZmm(:,d)),...
				'Tag','ListXYZ',...
				'ButtonDownFcn',[...
				    'hMIPax = findobj(''tag'',''hMIPax'');',...
				    'spm_mip_ui(''SetCoords'',',...
				    'get(gcbo,''UserData''),hMIPax);'],...
				'Interruptible','off','BusyAction','Cancel',...
				'UserData',XYZmm(:,d));

			HlistXYZ = [HlistXYZ, h];
			if spm_XYZreg('Edist',xyzmm,XYZmm(:,d))<tol & ...
				~isempty(hReg)
				set(h,'Color','r')
			end
			hPage = [hPage, h];
			D     = [D d];
			y     = y - dy;
			[TabDat.dat{TabLin,6:11}] = ...
				deal(Pu,Qu,Z(d),Ze,Pz,XYZmm(:,d));
			TabLin = TabLin+1;
		end
	    end
	end
	Z(j) = NaN;		% Set local maxima to NaN
end				% end region


%-Number and register last page (if paginated)
%-Changed to use Fgraph for numbering
%-----------------------------------------------------------------------
if spm_figure('#page',Fgraph)>1
	h = text(0.5,-5*dy,sprintf('Page %d/%d',spm_figure('#page',Fgraph)*[1,1]),...
		'FontName',PF.helvetica,'FontSize',FS(8),'FontAngle','Italic');
	spm_figure('NewPage',[hPage,h])
end

%-End: Store TabDat in UserData of axes & reset pointer
%=======================================================================
h      = uicontextmenu('Tag','TabDat',...
		'UserData',TabDat);
set(gca,'UIContextMenu',h,...
	'Visible','on',...
	'XColor','w','YColor','w')
uimenu(h,'Label','Table')
uimenu(h,'Separator','on','Label','Print text table',...
	'Tag','TD_TxtTab',...
	'CallBack',...
	'spm_list_nS(''txtlist'',get(get(gcbo,''Parent''),''UserData''),3)',...
	'Interruptible','off','BusyAction','Cancel');
uimenu(h,'Separator','off','Label','Extract table data structure',...
	'Tag','TD_Xdat',...
	'CallBack','get(get(gcbo,''Parent''),''UserData'')',...
	'Interruptible','off','BusyAction','Cancel');
uimenu(h,'Separator','on','Label','help',...
	'Tag','TD_Xdat',...
	'CallBack','spm_help(''spm_list_nS'')',...
	'Interruptible','off','BusyAction','Cancel');

%-Setup registry
%-----------------------------------------------------------------------
set(hAx,'UserData',struct('hReg',hReg,'HlistXYZ',HlistXYZ))
spm_XYZreg('Add2Reg',hReg,hAx,'spm_list_nS');

%-Return TabDat structure & reset pointer
%-----------------------------------------------------------------------
varargout = {TabDat};
spm('Pointer','Arrow')





%=======================================================================
case 'listcluster'                       %-List for current cluster only
%=======================================================================
% FORMAT TabDat = spm_list_nS('listcluster',VRPV,SPM,hReg)

spm('Pointer','Watch')

%-Parse arguments
%-----------------------------------------------------------------------
if nargin < 3,	error('insufficient arguments'),     end
if nargin < 4,	hReg = []; else, hReg = varargin{4}; end
SPM    = varargin{3};

%-get number and separation for maxima to be reported
%-----------------------------------------------------------------------
if length(varargin) > 4

	Num    = varargin{5};		% number of maxima per cluster
	Dis    = varargin{6};		% distance among clusters (mm)
else
	Num    = 32;
	Dis    = 4;
end


%-if there are suprathreshold voxels, filter out all but current cluster
%-----------------------------------------------------------------------
if length(SPM.Z)

	%-Jump to voxel nearest current location
	%--------------------------------------------------------------
	[xyzmm,i] = spm_XYZreg('NearestXYZ',...
			spm_results_ui('GetCoords'),SPM.XYZmm);
	spm_results_ui('SetCoords',SPM.XYZmm(:,i));
	
	%-Find selected cluster
	%--------------------------------------------------------------
	A         = spm_clusters(SPM.XYZ);
	j         = find(A == A(i));
	SPM.Z     = SPM.Z(j);
	SPM.XYZ   = SPM.XYZ(:,j);
	SPM.XYZmm = SPM.XYZmm(:,j);
	if isfield(SPM,'Rd'), SPM.Rd = SPM.Rd(:,j); end
end

%-Call 'list' functionality to produce table
%-----------------------------------------------------------------------
varargout = {spm_list_nS('list',SPM,hReg,Num,Dis)};





%=======================================================================
case 'txtlist'                                  %-Print ASCII text table
%=======================================================================
% FORMAT spm_list_nS('TxtList',TabDat,c)

if nargin<2, error('Insufficient arguments'), end
if nargin<3, c=1; else, c=varargin{3}; end
TabDat = varargin{2};

%-Table Title
%-----------------------------------------------------------------------
fprintf('\n\nSTATISTICS: %s\n',TabDat.tit)
fprintf('%c','='*ones(1,80)), fprintf('\n')

%-Table header
%-----------------------------------------------------------------------
fprintf('%s\t',TabDat.hdr{1,c:end-1}), fprintf('%s\n',TabDat.hdr{1,end})
fprintf('%s\t',TabDat.hdr{2,c:end-1}), fprintf('%s\n',TabDat.hdr{2,end})
fprintf('%c','-'*ones(1,80)), fprintf('\n')

%-Table data
%-----------------------------------------------------------------------
for i = 1:size(TabDat.dat,1)
	for j=c:size(TabDat.dat,2)
		fprintf(TabDat.fmt{j},TabDat.dat{i,j})
		fprintf('\t')
	end
	fprintf('\n')
end
for i=1:max(1,11-size(TabDat.dat,1)), fprintf('\n'), end
fprintf('%s\n',TabDat.str)
fprintf('%c','-'*ones(1,80)), fprintf('\n')

%-Table footer
%-----------------------------------------------------------------------
fprintf('%s\n',TabDat.ftr{:})
fprintf('%c','='*ones(1,80)), fprintf('\n\n')



%=======================================================================
case 'setcoords'                                    %-Co-ordinate change
%=======================================================================
% FORMAT spm_list_nS('SetCoords',xyz,hAx,hReg)
if nargin<3, error('Insufficient arguments'), end
hAx      = varargin{3};
xyz      = varargin{2};
UD       = get(hAx,'UserData');
HlistXYZ = UD.HlistXYZ(ishandle(UD.HlistXYZ));

%-Set all co-ord strings to black
%-----------------------------------------------------------------------
set(HlistXYZ,'Color','k')

%-If co-ord matches a string, highlight it in red
%-----------------------------------------------------------------------
XYZ      = get(HlistXYZ,'UserData');
if iscell(XYZ), XYZ = cat(2,XYZ{:}); end
[null,i,d] = spm_XYZreg('NearestXYZ',xyz,XYZ);
if d<eps
	set(HlistXYZ(i),'Color','r')
end


%=======================================================================
otherwise                                        %-Unknown action string
%=======================================================================
error('Unknown action string')


%=======================================================================
end
%=======================================================================
